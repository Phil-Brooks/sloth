searchState.loadedDescShard("cozy_chess_types", 0, "For internal use within <code>cozy-chess</code> only!\nThe bitboard module.\n<code>BitBoard</code> literal macro.\nThe castling module.\nThe chess_move module.\nThe color module.\nThe file module.\nModule for helper macros.\nThe piece module\nThe rank module.\nThe sliders module.\nThe square module.\nA bitboard. A bitboard is an ordered set of squares.\nAn iterator over the squares of a bitboard.\nAn iterator over the subsets of a bitboard.\nThe corners of the board.\nThe dark squares on the board.\nThe edges on the board.\nAn empty bitboard.\nA bitboard with every square.\nThe light squares on the board.\n<code>BitBoard</code> literal macro.\nFlip the bitboard’s files.\nFlip the bitboard’s ranks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if a <code>Square</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a bitboard contains no squares in common with …\nChecks if the <code>BitBoard</code> is empty.\nCheck if a bitboard is a subset of another.\nCheck if a bitboard is a superset of another.\nIterate the squares in the bitboard, ordered by square.\nIterate all subsets of a bitboard. Subsets are produced in …\nCount the number of squares in the bitboard.\nGrabs the first square if the bitboard is not empty.\nCastling rights.\nEmpty <code>CastleRights</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe rook file for long castling.\nThe rook file for short castling.\nA chess move.\nThe value was not a valid <code>Move</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe square to move the piece from.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe promotion piece, if it exists.\nThe square to move the piece to.\nAn array of all <code>Color</code> variants.\nThe color black.\nA side to move.\nThe value was not a valid <code>Color</code>.\nThe number of <code>Color</code> variants.\nThe color white.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an index to a <code>Color</code>.\n<code>const</code> version of <code>Color::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecked version of <code>Color::index</code>.\nThe A file.\nAn array of all <code>File</code> variants.\nThe B file.\nThe C file.\nThe D file.\nThe E file.\nThe F file.\nA file on a chessboard.\nThe value was not a valid <code>File</code>.\nThe G file.\nThe H file.\nThe number of <code>File</code> variants.\nGet a bitboard with all squares on adjacent files set.\nGet a bitboard with all squares on this file set.\nFlip the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an index to a <code>File</code>.\n<code>const</code> version of <code>File::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecked version of <code>File::index</code>.\nAn array of all <code>Piece</code> variants.\nA bishop.\nA king.\nA knight.\nThe number of <code>Piece</code> variants.\nA pawn.\nA chess piece. Pieces are ordered by approximate material …\nThe value was not a valid <code>Piece</code>.\nA queen.\nA rook.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an index to a <code>Piece</code>.\n<code>const</code> version of <code>Piece::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecked version of <code>Piece::index</code>.\nAn array of all <code>Rank</code> variants.\nThe eighth rank.\nThe fifth rank.\nThe first rank.\nThe fourth rank.\nThe number of <code>Rank</code> variants.\nA rank on a chessboard.\nThe value was not a valid <code>Rank</code>.\nThe second rank.\nThe seventh rank.\nThe sixth rank.\nThe third rank.\nGet a bitboard with all squares on this rank set.\nFlip the rank.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an index to a <code>Rank</code>.\n<code>const</code> version of <code>Rank::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a rank relative to some color. This flips the rank if …\nChecked version of <code>Rank::index</code>.\nThe A1 square.\nThe A2 square.\nThe A3 square.\nThe A4 square.\nThe A5 square.\nThe A6 square.\nThe A7 square.\nThe A8 square.\nAn array of all <code>Square</code> variants.\nThe B1 square.\nThe B2 square.\nThe B3 square.\nThe B4 square.\nThe B5 square.\nThe B6 square.\nThe B7 square.\nThe B8 square.\nThe C1 square.\nThe C2 square.\nThe C3 square.\nThe C4 square.\nThe C5 square.\nThe C6 square.\nThe C7 square.\nThe C8 square.\nThe D1 square.\nThe D2 square.\nThe D3 square.\nThe D4 square.\nThe D5 square.\nThe D6 square.\nThe D7 square.\nThe D8 square.\nThe E1 square.\nThe E2 square.\nThe E3 square.\nThe E4 square.\nThe E5 square.\nThe E6 square.\nThe E7 square.\nThe E8 square.\nThe F1 square.\nThe F2 square.\nThe F3 square.\nThe F4 square.\nThe F5 square.\nThe F6 square.\nThe F7 square.\nThe F8 square.\nThe G1 square.\nThe G2 square.\nThe G3 square.\nThe G4 square.\nThe G5 square.\nThe G6 square.\nThe G7 square.\nThe G8 square.\nThe H1 square.\nThe H2 square.\nThe H3 square.\nThe H4 square.\nThe H5 square.\nThe H6 square.\nThe H7 square.\nThe H8 square.\nThe number of <code>Square</code> variants.\nA square on a chessboard. Squares are ordered in …\nThe value was not a valid <code>Square</code>.\nGet a bitboard with this square set.\nGet the file of this square.\nFlip the file of this square.\nFlip the rank of this square.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an index to a <code>Square</code>.\n<code>const</code> version of <code>Square::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a square from a file and a rank.\nOffsets the square towards the top right.\nGet the rank of this square.\nGet a square relative to some color. This flips the square …\nChecked version of <code>Square::index</code>.\nNon-panicking version of <code>Square::offset</code>.")