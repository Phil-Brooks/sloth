searchState.loadedDescShard("cozy_chess", 0, "<code>cozy-chess</code>\nThe A file.\nThe A1 square.\nThe A2 square.\nThe A3 square.\nThe A4 square.\nThe A5 square.\nThe A6 square.\nThe A7 square.\nThe A8 square.\nAn array of all <code>Color</code> variants.\nAn array of all <code>Piece</code> variants.\nAn array of all <code>Square</code> variants.\nAn array of all <code>File</code> variants.\nAn array of all <code>Rank</code> variants.\nThe B file.\nThe B1 square.\nThe B2 square.\nThe B3 square.\nThe B4 square.\nThe B5 square.\nThe B6 square.\nThe B7 square.\nThe B8 square.\nA bishop.\nA bitboard. A bitboard is an ordered set of squares.\nAn iterator over the squares of a bitboard.\nAn iterator over the subsets of a bitboard.\nThe color black.\nA chessboard.\nA board builder to manipulate arbitrary boards.\nAn error while building a board.\nThe C file.\nThe C1 square.\nThe C2 square.\nThe C3 square.\nThe C4 square.\nThe C5 square.\nThe C6 square.\nThe C7 square.\nThe C8 square.\nThe corners of the board.\nCastling rights.\nA side to move.\nThe value was not a valid <code>Color</code>.\nThe D file.\nThe D1 square.\nThe D2 square.\nThe D3 square.\nThe D4 square.\nThe D5 square.\nThe D6 square.\nThe D7 square.\nThe D8 square.\nThe dark squares on the board.\nThe game ended in a draw.\nThe E file.\nThe E1 square.\nThe E2 square.\nThe E3 square.\nThe E4 square.\nThe E5 square.\nThe E6 square.\nThe E7 square.\nThe E8 square.\nThe edges on the board.\nAn empty bitboard.\nEmpty <code>CastleRights</code>.\nThe eighth rank.\nThe F file.\nThe F1 square.\nThe F2 square.\nThe F3 square.\nThe F4 square.\nThe F5 square.\nThe F6 square.\nThe F7 square.\nThe F8 square.\nA bitboard with every square.\nAn error while parsing the FEN.\nThe fifth rank.\nA file on a chessboard.\nThe value was not a valid <code>File</code>.\nThe first rank.\nThe fourth rank.\nThe G file.\nThe G1 square.\nThe G2 square.\nThe G3 square.\nThe G4 square.\nThe G5 square.\nThe G6 square.\nThe G7 square.\nThe G8 square.\nThe current state of the game.\nThe H file.\nThe H1 square.\nThe H2 square.\nThe H3 square.\nThe H4 square.\nThe H5 square.\nThe H6 square.\nThe H7 square.\nThe H8 square.\nAn error returned when the move played was illegal.\nThe board is invalid.\nThe board is invalid.\nThe castling rights are invalid.\nThe castling rights are invalid.\nThe en passant square is invalid.\nThe en passant square is invalid.\nThe fullmove number is invalid.\nThe fullmove number is invalid.\nThe halfmove clock is invalid.\nThe halfmove clock is invalid.\nThe side to move is invalid.\nA king.\nA knight.\nThe light squares on the board.\nThe FEN is missing a field.\nA chess move.\nThe value was not a valid <code>Move</code>.\nThe number of <code>Color</code> variants.\nThe number of <code>Piece</code> variants.\nThe number of <code>Square</code> variants.\nThe number of <code>File</code> variants.\nThe number of <code>Rank</code> variants.\nThe game is still ongoing.\nA pawn.\nA chess piece. Pieces are ordered by approximate material …\nA compact structure representing multiple moves for a …\nIterator over the moves in a <code>PieceMoves</code> instance.\nThe value was not a valid <code>Piece</code>.\nA queen.\nA rank on a chessboard.\nThe value was not a valid <code>Rank</code>.\nA rook.\nThe second rank.\nThe seventh rank.\nThe sixth rank.\nA square on a chessboard. Squares are ordered in …\nThe value was not a valid <code>Square</code>.\nThe third rank.\nThe FEN has too many fields.\nThe color white.\nThe game ended in a win.\nGet a bitboard with all squares on adjacent files set.\nGet a bitboard with this square set.\nGet a bitboard with all squares on this file set.\nGet a bitboard with all squares on this rank set.\n<code>BitBoard</code> literal macro.\nThe board state. Index by square to get the corresponding …\nBuild a <code>Board</code> from this builder.\nGet the castle rights for a side.\nGet the <code>CastleRights</code> for some side.\nThe castling rights. Index by color to get the …\nMutably get the castle rights for a side.\nGet the pieces currently giving check.\nGet a builder set to a chess960 start position. Converts a …\nGet a board with a chess960 start position. Converts a …\nGet the <code>Color</code> of the piece on <code>square</code>, if there is one.\nGet a <code>BitBoard</code> of all the pieces of a certain color and …\nGet a <code>BitBoard</code> of all the pieces of a certain color.\nGet a builder set to a double chess960 start position. …\nGet a board with a double chess960 start position. Uses …\nGet an empty builder. All fields are set to their empty …\nGet the en passant file, if it exists.\nThe en passant square.\nGet the file of this square.\nFlip the file.\nFlip the rank.\nFlip the file of this square.\nFlip the bitboard’s files.\nFlip the rank of this square.\nFlip the bitboard’s ranks.\nDisplay the board. You can use the alternate format mode …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe square to move the piece from.\nThe square to move the piece from.\nCreate a builder from a <code>Board</code>.\nParse a FEN string. If <code>shredder</code> is true, it parses …\nParse the board. This method will parse both regular FENs …\nGet the fullmove number.\nThe fullmove number.\nGenerate all legal moves given a position in no particular …\nVersion of <code>Board::generate_moves</code> moves that generates …\nGet all squares between two squares, if reachable via a …\nGet the moves for a bishop on some square. See …\nSignificantly slower <code>const</code> version of <code>get_bishop_moves</code>.\nGet the rays for a bishop on some square.\nGet the king moves for a king on some square.\nGet the knight moves for a knight on some square.\nGet a ray on the board that passes through both squares, …\nGet the pawn attacks for a pawn on some square.\nGet the pawn forward moves/non-captures for a pawn of some …\nGet the moves for a rook on some square. See …\nSignificantly slower <code>const</code> version of <code>get_rook_moves</code>.\nGet the rays for a rook on some square.\nGet the halfmove clock.\nThe halfmove clock.\nCheck if it contains a given <code>Move</code>.\nCheck if a <code>Square</code> is set.\nGet the incrementally updated position hash. Does not …\nGet the incrementally updated position hash without en …\nConvert an index to a <code>Color</code>.\nConvert an index to a <code>Piece</code>.\nConvert an index to a <code>Square</code>.\nConvert an index to a <code>File</code>.\nConvert an index to a <code>Rank</code>.\n<code>const</code> version of <code>Color::index</code>.\n<code>const</code> version of <code>Piece::index</code>.\n<code>const</code> version of <code>Square::index</code>.\n<code>const</code> version of <code>File::index</code>.\n<code>const</code> version of <code>Rank::index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a bitboard contains no squares in common with …\nCheck if there are no <code>Move</code>s.\nChecks if the <code>BitBoard</code> is empty.\nSee if a move is legal.\nCheck if a bitboard is a subset of another.\nCheck if a bitboard is a superset of another.\nIterate the squares in the bitboard, ordered by square.\nIterate all subsets of a bitboard. Subsets are produced in …\nGet the king square of some side.\nGet the number of <code>Move</code>s.\nCount the number of squares in the bitboard.\nThe rook file for long castling.\nMake a square from a file and a rank.\nGrabs the first square if the bitboard is not empty.\nAttempt to play a null move, returning a new board if …\nGet a <code>BitBoard</code> of all the pieces on the board.\nOffsets the square towards the top right.\nThe <code>Piece</code> that is moved.\nGet the <code>Piece</code> on <code>square</code>, if there is one.\nGet a <code>BitBoard</code> of all the pieces of a certain type.\nGet the pinned pieces for the side to move. Note that this …\nPlay a move while checking its legality. Note that this …\nUnchecked version of <code>Board::play</code>. Use this method with …\nThe promotion piece, if it exists.\nGet the rank of this square.\nGet a square relative to some color. This flips the square …\nGet a rank relative to some color. This flips the rank if …\nCheck if two positions are equivalent based on the FIDE …\nSet the fullmove number.\nSet the halfmove clock.\nThe rook file for short castling.\nGet the current side to move.\nThe side to move.\nGet a square on the board.\nMutably get a square on the board.\nGet a builder set to the default start position.\nGet a board with the default start position.\nGet the status of the game. Note that this game may still …\nThe possible destination squares.\nThe square to move the piece to.\nChecked version of <code>Color::index</code>.\nChecked version of <code>Piece::index</code>.\nChecked version of <code>Square::index</code>.\nChecked version of <code>File::index</code>.\nChecked version of <code>Rank::index</code>.\nNon-panicking version of <code>Square::offset</code>.\nNon-panicking version of <code>Board::play</code>. Tries to play a …\nAdditional common utilities\nReturns an object that allows printing a <code>Move</code> in Standard …\nReturns an object that allows printing a <code>Move</code> in UCI …\nParses a Standard Algebraic Notation move into a <code>Move</code>.\nParses a UCI move into a <code>Move</code>.")